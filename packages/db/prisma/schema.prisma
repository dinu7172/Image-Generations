// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  username        String
  profilePicture  String?
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum ModelTrainingStatusEnum {
  Pending
  Generated
  Failed
}

model Model {
  id          String   @id @default(uuid())
  name        String
  type        ModelTypeEnum
  age         Int
  ethinicity   EthnicityEnum
  eyeColor    EyeColorEnum
  hairColor   HairColorEnum
  bald        Boolean
  userId      String
  triggerWord String?
  tensorPath  String?
  trainingStatus ModelTrainingStatusEnum @default(Pending)
  images      String[]
  // trainingImages TrainingImages[]
  outputImages OutputImages[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  falAiRequestId String?
  zipUrl      String
  @@index([falAiRequestId])
}

// model TrainingImages {
//   id          String   @id @default(uuid())
//   imageUrl    String
//   modelId     String
//   model       Model   @relation(fields: [modelId], references: [id]) 
// }

enum OutputImageStatusEnum {
  Pending
  Generated
  Failed
}

model OutputImages {
  id          String   @id @default(uuid())
  imageUrl    String       @default("")
  modelId     String
  status      OutputImageStatusEnum   @default(Pending)
  falAiRequestId  String?
  prompt      String
  userId      String
  model       Model   @relation(fields: [modelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Packs {
  id          String   @id @default(uuid())
  name        String
  prompts     PackPrompts[]
}

model PackPrompts {
  id          String   @id @default(uuid())
  prompt      String
  packId      String
  pack        Packs   @relation(fields: [packId], references: [id])
 }

enum ModelTypeEnum {
  Man
  Women
  Kids
  Others
}
enum EthnicityEnum {
  White
  Black
  Asian_American   @map("Asian American")
  East_Asian       @map("East Asian")
  Hispanic
  Middle_Eastern   @map("Middle Eastern")
  South_Asian      @map("South Asian")
  South_East_Asian  @map("South East Asian")
  Pacific_Islander @map("Pacific Islander")
  Others
}

enum EyeColorEnum {
  Brown
  Blue
  Green
  Hazel
  Gray
  Amber
  Red
  Black
  Others
}
enum HairColorEnum {
  Black
  Brown
  Blonde
  Red
  Gray
  White
  Others
}